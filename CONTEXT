Next Steps:
- Add user management
	- Add an admin user / pass (no public registration)
	- Add a user management page (add / view / edit / delete)
- Add ticket management (under projects)
	- Time estimates for tickets (static upon creation)
	- Keep track of which ticket is being worked on (all operation happen through git)
	- Calculate code speeds of users upon ticket completion
- Add project management
	- Add a price to each ticket, pay through Stripe / Paypal / External
	- Add hooks for pushing to staging / production servers once payment is received
	- Add a donation voting system (like kickstarter) for open-source projects, to vote on which tickets to complete
	- Add ability to add recurring costs (such as for hosting)
	- Track all costs (from tickets / recurring) on temporal chart, and also show what the client has paid for
- Add server management
	- Manage staging / prod servers using an Ancible plugin (use it to setup / teardown external servers)
	- Make server recipes (Ancible template files) that take in other existing servers as input arguments
	- Example: A Postgres backup recipe that takes in a Postgres db as an input to backup from
	- Example: A Phoenix web server recipe that takes in a Postgres db to connect to
	- Possibly show all servers in nice d3 graph, with connections
	- Also see if you can make Ancible recipes that let you run on existing servers so you can save money instead of spinning up new droplets
- Find a way to get ssh auth working with git
	- Add a linux user with same name as user in db
	- Restrict ssh for that user to being in /priv/users/<username>, and restrict to git-shell (only git ops)
	- Have all git repos hosted be under /priv/projects/<project_id>
	- Add symlinks like /priv/users/<username>/projects/<project_id> -> /priv/projects/<project_id> if user has access to that project
- Setup docker image to contain both webserver / sshd / repos
	- Possibly just setup a docker git server with linux users (https://hub.docker.com/r/unixtastic/git-ssh-server/)
	- Another docker ssh example: https://docs.docker.com/engine/examples/running_ssh_service/

How to charge clients:
- New tickets cost money, they cost a fixed amount based on a time estimate of the developer and their code speed(s)
- Once tickets are paid for, they are guaranteed to work as intended in the software product
- If a feature outlined in an old ticket stops working (regression), it will be fixed for free
- If the client wants the software to do something that is not outlined in any existing tickets (even if it's a bug), that's a new ticket and so it costs money
- Charge $20 / month for running the website (host web server on DO droplet, Postgres on another droplet, and an auto-replicate Postgres on another droplet, and keep weekly backups on bigass external drive at home)
- Never keep any state in web server, reinstalling web server should be not much more than a git clone
