Next Steps:
- Add user management
	- Add an admin user / pass (no public registration)
	- On user management page, edit / delete
	- When selecting a user, add thumb under Users header to indicate that results on other pages will be filtered for that user
- Add ticket management (under projects)
	- Time estimates for tickets (static upon creation)
	- Keep track of which ticket is being worked on (all operation happen through git)
	- Calculate code speeds of users upon ticket completion
	- When selecting a project, add thumb under Projects header to indicate that results on other pages will be filtered for that project
- Add project management
	- Add a price to each ticket, pay through Stripe / Paypal / External
	- Add hooks for pushing to staging / production servers once payment is received
	- Add a donation voting system (like kickstarter) for open-source projects, to vote on which tickets to complete
	- Add ability to add recurring costs (such as for hosting)
	- Track all costs (from tickets / recurring) on temporal chart, and also show what the client has paid for
- Add server management
	- Write bash scripts (da best!) for all add/update/delete functions of apps (add web app, update db connection, etc)
	- Add ability to make server clusters which run multiple websites and route via hostname using nginx
	- Possibly use something like influxDB to pull all monitoring data for the servers and place it elsewhere
	- Possibly show all servers / server interconnections in nice d3 graph
- Add git server / ticket based authorization
	- Every commit should be on a ticket, even if that ticket is 0000 (uncategorized change). have the system complain about un-ticketed commits
	- Use some kind of machine learning to infer the time spent on tickets solely by looking at the commits / timestamps
	- Use that ML estimate of actual time spent and compare it to ticket parameters (difficulty, uncertainty, etc) to estimate how much time future tickets will take and therefore how much those tickets are worth
	- use gitolite: https://git-scm.com/book/en/v1/Git-on-the-Server-Gitolite

How to charge clients:
- New tickets cost money, they cost a fixed amount based on a time estimate of the developer and their code speed(s)
- Once tickets are paid for, they are guaranteed to work as intended in the software product
- If a feature outlined in an old ticket stops working (regression), it will be fixed for free
- If the client wants the software to do something that is not outlined in any existing tickets (even if it's a bug), that's a new ticket and so it costs money
- Charge $20 / month for running the website (host web server on DO droplet, Postgres on another droplet, and an auto-replicate Postgres on another droplet, and keep weekly backups on bigass external drive at home)
- Never keep any state in web server, reinstalling web server should be not much more than a git clone + database hookup
