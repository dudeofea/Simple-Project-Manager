Next Steps:
- Add user management
	- Add an admin user / pass (no public registration)
	- On user management page, edit / delete
	- When selecting a user, add thumb under Users header to indicate that results on other pages will be filtered for that user
- Add ticket management (under projects)
	- Time estimates for tickets (static upon creation)
	- Keep track of which ticket is being worked on (all operation happen through git)
	- Calculate code speeds of users upon ticket completion
	- When selecting a project, add thumb under Projects header to indicate that results on other pages will be filtered for that project
- Add project management
	- Add a price to each ticket, pay through Stripe / Paypal / External
	- Add hooks for pushing to staging / production servers once payment is received
	- Add a donation voting system (like kickstarter) for open-source projects, to vote on which tickets to complete
	- Add ability to add recurring costs (such as for hosting)
	- Track all costs (from tickets / recurring) on temporal chart, and also show what the client has paid for
- Add server management
	- Manage staging / prod servers using an Ancible plugin (use it to setup / teardown external servers)
	- Make server recipes (Ancible template files) that take in other existing servers as input arguments
	- Example: A Postgres backup recipe that takes in a Postgres db as an input to backup from
	- Example: A Phoenix web server recipe that takes in a Postgres db to connect to
	- Possibly show all servers / server interconnections in nice d3 graph
	- Also see if you can make Ancible recipes that let you run on existing servers so you can save money instead of spinning up new droplets
- Add git server / ticket based authorization
	- Only one person can work on a ticket at the same time
	- A ticket is marked done when it is merged into the dev branch via the web GUI
	- To work on a ticket, you have to check it out in the web GUI, which will give your account permission to pull the ticket-<ticket no> branch
	- You can work on multiple tickets at once, to stop working on one push your changes and check in your branch via the web GUI
	- Not sure if every commit needs to be on a ticket...need to think about that
	- use gitolite: https://git-scm.com/book/en/v1/Git-on-the-Server-Gitolite

How to charge clients:
- New tickets cost money, they cost a fixed amount based on a time estimate of the developer and their code speed(s)
- Once tickets are paid for, they are guaranteed to work as intended in the software product
- If a feature outlined in an old ticket stops working (regression), it will be fixed for free
- If the client wants the software to do something that is not outlined in any existing tickets (even if it's a bug), that's a new ticket and so it costs money
- Charge $20 / month for running the website (host web server on DO droplet, Postgres on another droplet, and an auto-replicate Postgres on another droplet, and keep weekly backups on bigass external drive at home)
- Never keep any state in web server, reinstalling web server should be not much more than a git clone + database hookup
